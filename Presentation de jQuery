  Présentation de JQuery
  
  JQuery est une JavaScript library  multi-plateforme. C'est très facile à comprendre et à utiliser. Son but est de
            simplifier la programmation en JavaScript dans les sites web. En outre, elle simplifie les choses compliquées en 
            JavaScript comme les appels AJAX et la manipulation DOM. 
            Il existe différent JavaScript frameworks, mais jQuery est plus populaire et la plus extensible.

            On a plusieurs méthodes pour ajouter jQuery à notre site web, on peut télécharger jQuery library du site jQyery.com ou
            intégrer jQuery de la CDN, comme Google.

            Téléchargement de jQuery
            I existe 2 versions valides pour le téléchargement de JQuery:
            Production version - utiliser pour les sites web en ligne car elle est minimisée et comprimée
            Development version - utiliser pour les expérimentation et developpement (non comprimée et code lisible)
            Les 2 versions peut être téléchargé de jQuery.com.

            JQuery library est un seul fichier JavaScript, qu'on le réfère avec HTML
            <!--<script> tag (notons que <script> tag doit être dans la section <head>:

            <head>
            <script src="jquery-1.10.2.min.js"></script>
            </head> -->

            Remarque: D'ailleurs, on ajoutait type="text/javascript" dans script tag mais maintenant dans HTML5 cela n'est pas 
            obligatoire car JavaScript est un langage par défaut dans HTML5 et dans tous les navigateurs modernes.


            Alternatives à télécharger
            Si vous ne souhaitez pas télécharger et héberger jQuery vous-même, vous pouvez l'inclure à partir de CDN 
            (Content Delivery Network). Google et Microsoft accueille jQuery.

            Pour utiliser jQuery de Google ou Microsoft, on l'utilise à partir  de:

            <!--<!DOCTYPE html>
            <html>
            <head>
            <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
            <script>
            $(document).ready(function(){
              $("button").click(function(){
                $("p").hide();
              });
            });
            </script>
            </head>

            <body>
            <h2>This is a heading</h2>
            <p>This is a paragraph. And on click this paragraph will disappear</p>
            <button>Click me</button>
            </body>
            </html>

            ou d'une autre méthode:

            <!DOCTYPE html>
            <html>
            <head>
            <script src="//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.10.2.min.js"></script>
            <script>
            $(document).ready(function(){
              $("button").click(function(){
                $("p").hide();
              });
            });
            </script>
            </head>

            <body>
            <h2>This is a heading</h2>
            <p>This is a paragraph. And on click this paragraph will disappear</p>
            <button>Click me</button>
            </body>
            </html> -->

            L'attribut src dans la tag script à changer

            On a un grand avantage si on utilise jQuery de Google ou de Microsoft:
            De nombreux utilisateurs ont déjà téléchargé jQuery de Google ou de Microsoft en visitant
            autre site. En conséquence, il sera chargé à partir de la mémoire cache quand ils visitent votre site,
            ce qui conduit à accélérer le temps de chargement. En outre, la plupart de CDN aura s'assurer
            qu'une fois qu'un utilisateur demande un fichier, il sera servi à partir du serveur le plus proche pour eux, qui
            conduit également à accélérer le temps de chargement.


            I - Syntaxe de jQuery

              Avec jQuery vous sélectionnez (requête / query) les éléments HTML et vous effectuez des "actions" sur eux.
              Donc la syntaxe jQuery est faite sur mesure pour sélectionner des éléments HTML et effectuer une
              action sur ces éléments.
              La syntaxe de base est:  $(selector).action();
                * $ est pour définir l'accès de jQuery
                * (selector) pour trouver l'élément HTML sélectionné
                * action() Une action jQuery à effectuer sur l'élément

              Examples:
              $(this).hide() - masquer l'élément courant
              $("p").hide() - masquer tous les éléments de &lt;p&gt;
              $(".test").hide() - masquer tous les éléments ayant l'attribut class="test".
              $("#test").hide() - masquer l'élément ayant l'attribut id="test".
              De même, on peut faire des sélections à partir du CSS, jQuery utilise les syntaxes CSS pour sélectionner des 
              éléments HTML.

              L'évènement Document Ready
              Vous avez sans doute remarqué que toutes les méthodes jQuery dans nos exemples, sont dans un cas document ready

              $(document).ready(function(){
                 // jQuery methods go here...
              });

              Ceci afin d'éviter tout code jQuery de s'exécuter avant que le document sera fini de se charger (is ready).
              Il est meilleur d'attendre que le document soit entièrement chargé et prêt avant toute intervention .
              Cela permet également d'avoir votre code JavaScript dans la section de la tête avant le corps de votre document.

              Voici quelques exemples d'actions qui peuvent échouer si les méthodes sont exécutées avant que le document
              est entièrement chargé:

              En essayant de cacher un élément qui n'est pas encore créé
              Essayer d'obtenir la taille d'une image qui n'est pas encore chargée
              Astuce: L'équipe de jQuery a également créé une méthode encore plus court pour l'événement document ready:

              $ (function () {
              / / Méthodes jQuery vont ici ...
              });

              Utilisez la syntaxe que vous préférez.
              Nous pensons que l'événement document ready est plus facile à comprendre à la lecture du code.

            II - Les sélecteurs de jQuery

              1 - Les sélecteurs de jQuery

                  Les sélecteurs de jQuery vous permettent de sélectionner et de manipuler les éléments dans HTML. 
                  Les sélecteurs de jQuery sont utilisés pour «trouver» (ou sélectionnez) des éléments HTML 
                  en fonction de leur identification, leurs classes, leurs types, leurs attributs, les valeurs des attributs 
                  et beaucoup plus. Il est basé sur les sélecteurs existants en CSS.
                  Tous les sélecteurs de jQuery commencent avec le signe du dollar et entre parenthèses: $().

              2 - Le sélecteur d'élément 

                  L'élément sélecteur de jQuery sélectionne des éléments sur la base du nom de l'élément.
                  Vous pouvez sélectionner tous les éléments <p> sur une page comme celle-ci: $ ("p")

                  Exemple:  Quand un utilisateur clique sur le bouton, tous les éléments <p> de cette exmeple vont se cacher
                     <!-- <!DOCTYPE html>
                      <html>
                      <head>
                      <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
                      </script>
                      <script>
                      $(document).ready(function(){
                        $("button").click(function(){
                          $("p").hide();
                        });
                      });
                      </script>
                      </head>

                      <body>
                      <h2>This is a heading</h2>
                      <p>Paragraph 1</p>
                       <p>Paragraph 2</p>
                        <p>Paragraph 3</p>
                      <button>Click me</button>
                      </body>
                      </html> -->

              3 - Le sélecteur # id

                  Le sélecteur # id de jQuery utilise l'attribut id d'une balise HTML pour trouver l'élément spécifique.
                  Un id doit être unique dans une page, vous devez donc utiliser le sélecteur # id si vous souhaitez
                  trouver un seul élément unique. Pour trouver un élément avec un ID spécifique, écrire un signe dièse,
                  suivi par l'id de l'élément: $ ("# test")

                  Exemple: Quand un utilisateur clique sur le bouton, l'élément avec id = "test" sera caché:
                     <!-- <!DOCTYPE html>
                      <html>
                      <head>
                      <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
                      </script>
                      <script>
                      $(document).ready(function(){
                        $("button").click(function(){
                          $("#test").hide();
                        });
                      });
                      </script>
                      </head>

                      <body>
                      <h2>This is a heading</h2>
                       <p>Paragraph 1</p>
                       <p id="test">Paragraph 2</p>
                       <p>Paragraph 3</p>
                      <button>Click me</button>
                      </body>
                      </html> -->

              4 - Le sélecteur .class

                  Le sélecteur .class cherche des éléments avec une classe spécifique. Pour trouver les éléments avec
                  une classe spécifique, écrire un caractère de période, suivi du nom de la classe: $(".test")

                  Exemple :Quand un utilisateur clique sur un bouton, les éléments avec class = "test" seront cachés:
                    Donc p2 et p3 vont se cacher
                     <!-- <!DOCTYPE html>
                      <html>
                      <head>
                      <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
                      </script>
                      <script>
                      $(document).ready(function(){
                        $("button").click(function(){
                          $("#test").hide();
                        });
                      });
                      </script>
                      </head>

                      <body>
                      <h2>This is a heading</h2>
                       <p>Paragraph 1</p>
                       <p class="test">Paragraph 2</p>
                       <p class="test">Paragraph 3</p>
                      <button>Click me</button>
                      </body>
                      </html> -->

              5 - D'autres exemples de selecteurs:

                  $("*")	Cherche tous les éléments du document
                  $(this)	Cherche l'élément du document HTML courant
                  $("p.intro")	Cherche tous les éléments &lt;p&gt; ayant class="intro"	
                  $("p:first")	Cherche le premier élément &lt;p&gt;
                  $("ul li:first")	Cherche le premier élément &lt;li&gt; de la première liste &lt;ul&gt;
                  $("ul li:first-child")	Cherche le premier élément &lt;li&gt; de chaque &lt;ul&gt;
                  $("[href]")	Cherche tous les éléments ayant un attribut href 	
                  $("a[target='_blank']")	Cherche tous les éléments  &lt;a&gt; avec un attribut target ayant une valeur  "_blank"	
                  $("a[target!='_blank']")	Cherche tous les éléments  &lt;a&gt; avec un attribut target n'ayant pas une valeur "_blank"	
                  $(":button")	Cherche tous les éléments &lt;button&gt; et &lt;input&gt; de type="button"	
                  $("tr:even")	Cherche tous les éléments &lt;tr&gt; even	
                  $("tr:odd")	Cherche tous les éléments &lt;tr&gt; odd
           
                  
                III - Les Events de jQuery

                    1 - C'est quoi events dans jQuery ?

                        Tous les différentes actions qu'un visiteur peut faire su un site web est nommé Event.
                        Ce dernier précise le temps de l'action et quand elle se déroule.
                        Exemple:
                        * Lorsqu'on clique su le curseur pour une ou deux fois
                        * Lorsqu'on met le curseur sur un élément


                          Mouse Events	Keyboard Events    Form Events	  Document/Window Events
                          click	           keypress	     submit	         load
                          dblclick	   keydown	     change	         resize
                          mouseenter	   keyup	     focus	         scroll
                          mouseleave	                     blur	         unload

                    2 - Les syntaxes de jQuery pour les méthodes Event

                        Dans jQuery, la plupart des DOM events possèdent des méthodes équivalentes de jQuery.
                        Exemple:
                        * Si on voulait assigner un event click pour tous les paragraphes sur une page, on écrit:
                          $("p").click();
                        * Puis on définit qu'est-ce qui va arriver lorsqu'on clique le curseur. On ajoutte un fonction:
                          $("p").click(function(){
                            // action goes here!!
                          });

                        Quelques exemples:
                        * dblClick()
                        * mouseenter()  -  mouseup()  -  mouseleave()  -  mousedown()
                        * hide()  -  show()
                        * slideToggle() -  slideUp()  -  sliadeDown()
                        * hover()
                        * focus()
                        * blur()


                    IV - JQuery AJAX :

                       AJAX est l'art de l'échange de données avec un serveur, et la mise à jour des parties d'une page Web - sans recharger la page entière.

                       Qu'est-ce que AJAX ?
                       AJAX = Asynchronous JavaScript and XML . 
                       En bref , AJAX est pour ​​le chargement de données en arrière-plan et l'afficher sur la page Web, sans avoir à recharger la page entière .
                       Exemples d'applications utilisant AJAX : Gmail , Google Maps , Youtube , et onglets Facebook . 

                       Qu'en est-il de jQuery et AJAX ?
                       jQuery fournit plusieurs méthodes pour les fonctionnalités AJAX .
                       Avec les méthodes jQuery AJAX , vous pouvez demander le texte , HTML , XML , JSON ou à partir d'un serveur distant en utilisant les protocoles HTTP GET et HTTP POST - Et vous pouvez charger les données externes directement dans les éléments HTML sélectionnés de votre page web !

                       Remarque: Sans jQuery , AJAX codage peut être un peu difficile !
                          L'écriture de code AJAX régulière peut être un peu difficile , parce que les différents navigateurs ont une syntaxe différente pour la mise en œuvre AJAX . Cela signifie que vous devrez écrire du code supplémentaire pour tester les différents navigateurs . Cependant , l'équipe de jQuery a pris soin de cela, afin que nous puissions écrire des fonctionnalités AJAX avec une seule ligne de code .

                       1 - jQuery - AJAX Methode load() 

                          La méthode load() est une méthode AJAX simple, mais puissante.
                          La méthode load() charge les données d' un serveur et met les données renvoyées dans l'élément sélectionné .
                          Syntaxe:  
                          $(selector).load(URL,data,callback);
                          Le paramètre d'URL requis spécifie l'URL que vous souhaitez charger .
                          Le paramètre data optionnel spécifie un ensemble de chaîne de requête paires clé/valeur à envoyer avec la demande .
                          Le paramètre optionnel callback est le nom d' une fonction à exécuter après que la fonction load() est terminée.

                          Voici le contenu de notre fichier d'exemple : " demo_test.txt " :
                              <!--<!DOCTYPE html>
                                  <html>
                                      <head>
                                          <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
                                          </script>
                                          <script>
                                          $(document).ready(function(){
                                            $("button").click(function(){
                                              $("#div1").load("demo_test.txt");
                                            });
                                          });
                                          </script>
                                      </head>
                                      <body>
                                          <div id="div1"><h2>Let jQuery AJAX Change This Text</h2></div>
                                          <button>Get External Content</button>
                                      </body>
                                  </html> -->

                          L'exemple suivant charge le contenu du fichier " demo_test.txt " dans un élément <div> spécifique :
                          Il est également possible d'ajouter un sélecteur jQuery pour le paramètre d'URL .

                          Le paramètre callback optionnel spécifie une fonction callback à exécuter lorsque la méthode load () est terminée. La fonction callback peut avoir différents paramètres:
                          * responseTxt - contient le contenu résultant si l'appel réussit
                          * statusTxt - contient l'état de l'appel
                          * XHR - contient l'objet XMLHttpRequest

                          L'exemple suivant affiche un message d'alerte après que la méthode load () est terminée. Si la méthode load () a réussit, il affiche "External content loaded successfully!", Et si elle échoue, il affiche un message d'erreur:
                            $("button").click(function(){
                              $("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
                                if(statusTxt=="success")
                                  alert("External content loaded successfully!");
                                if(statusTxt=="error")
                                  alert("Error: "+xhr.status+": "+xhr.statusText);
                              });
                            });

                       2 -  jQuery - AJAX Méthodes get() et post()  

                          Les méthodes get() et post() sont utilisées pour demander des données à partir du serveur avec une requête HTTP GET ou POST. 

                          Requête HTTP: GET vs POST
                          Deux méthodes couramment utilisées pour une requête-réponse entre le client et le serveur: GET et POST.    
                          * GET - Demandes données à partir d'une ressource spécifiée
                          * POST - des données soumet à être traitées à une ressource spécifiée
                          * GET est essentiellement utilisé pour simplement obtenir (récupération) des données à partir du serveur. Remarque: La méthode GET peut renvoyer des données mises en cache.
                          * POST peut également être utilisé pour obtenir des des données à partir du serveur. Cependant, la méthode POST ne met jamais les données dans la mémoire cache, et est souvent utilisé pour envoyer des données avec la demande.

                       a- La méthode $.Get()

                          La méthode $.Get() demande des données à partir du serveur avec une demande HTTP GET.
                          Exemple:
                             <!-- <!DOCTYPE html>
                              <html>
                                  <head>
                                      <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
                                      </script>
                                      <script>
                                      $(document).ready(function(){
                                        $("button").click(function(){
                                          $.get("demo_test.asp",function(data,status){
                                            alert("Data: " + data + "\n Status: " + status);
                                          });
                                        });
                                      });
                                      </script>
                                  </head>
                                  <body>
                                      <button>Send an HTTP GET request to a page and get the result back</button>
                                  </body>
                              </html>-->

                          Le premier paramètre de $. Get () est l'URL que nous voulons demander ("demo_test.asp"). 
                          Le second paramètre est une fonction callback. Le premier paramètre callback maintient le contenu de la page demandée, et le second paramètre callback maintient l'état de la requête. 

                       b- La méthode $.POST()

                          La méthode $.Post() demande des données au serveur à l'aide d'une requête HTTP POST. 
                          Syntaxe:  $.post(URL,data,callback);
                          Le paramètre d'URL requis spécifie l'URL que vous souhaitez demander.
                          Le paramètre de données optionnel spécifie des données à envoyer avec la demande. 
                          Le paramètre option callback est le nom d'une fonction à exécuter si la requête aboutit. 

                          L'exemple suivant utilise la méthode $.post() pour envoyer des données avec la demande:
                          <!--<!DOCTYPE html>
                              <html>
                                  <head>
                                      <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
                                      </script>
                                      <script>
                                      $(document).ready(function(){
                                        $("button").click(function(){
                                          $.post("demo_test_post.asp",
                                          {
                                            name:"Donald Duck",
                                            city:"Duckburg"
                                          },
                                          function(data,status){
                                            alert("Data: " + data + "\nStatus: " + status);
                                          });
                                        });
                                      });
                                      </script>
                                  </head>
                                  <body>
                                      <button>Send an HTTP POST request to a page and get the result back</button>
                                  </body>
                              </html>-->


  V - References de jQuery 

        1 - jQuery Selectors

            *                   $("*")                          All elements
            #id                 $("#lastname")                  The element with id="lastname"
            .class              $(".intro")                     All elements with class="intro"
            .class,.class	$(".intro,.demo")               All elements with the class "intro" or "demo"
            element             $("p")                          All <p> elements
            el1,el2,el3         $("h1,div,p")                   All <h1>, <div> and <p> elements

            :first              $("p:first")                    The first <p> element
            :last               $("p:last")                     The last <p> element
            :even               $("tr:even")                    All even <tr> elements
            :odd                $("tr:odd")                     All odd <tr> elements

            :first-child	$("p:first-child")              All <p> elements that are the first child of their parent
            :first-of-type	$("p:first-of-type")            All <p> elements that are the first <p> element of their parent
            :last-child         $("p:last-child")               All <p> elements that are the last child of their parent
            :last-of-type	$("p:last-of-type")             All <p> elements that are the last <p> element of their parent
            :nth-child(n)	$("p:nth-child(2)")             All <p> elements that are the 2nd child of their parent
            :nth-last-child(n)	$("p:nth-last-child(2)")	All <p> elements that are the 2nd child of their parent, counting from the last child
            :nth-of-type(n)	$("p:nth-of-type(2)")           All <p> elements that are the 2nd <p> element of their parent
            :nth-last-of-type(n)$("p:nth-last-of-type(2)")	All <p> elements that are the 2nd <p> element of their parent, counting from the last child
            :only-child         $("p:only-child")               All <p> elements that are the only child of their parent
            :only-of-type	$("p:only-of-type")             All <p> elements that are the only child, of its type, of their parent

            parent > child	$("div > p")                    All <p> elements that are a direct child of a <div> element
            parent descendant	$("div p")                      All <p> elements that are descendants of a <div> element
            element + next	$("div + p")                    The <p> element that are next to each <div> elements
            element ~ siblings	$("div ~ p")                    All <p> elements that are siblings of a <div> element

            :eq(index)          $("ul li:eq(3)")                The fourth element in a list (index starts at 0)
            :gt(no)             $("ul li:gt(3)")                List elements with an index greater than 3
            :lt(no)             $("ul li:lt(3)")                List elements with an index less than 3
            :not(selector)	$("input:not(:empty)")          All input elements that are not empty

            :header             $(":header")                    All header elements <h1>, <h2> ...
            :animated           $(":animated")                  All animated elements
            :focus              $(":focus")                     The element that currently has focus
            :contains(text)	$(":contains('Hello')")         All elements which contains the text "Hello"
            :has(selector)	$("div:has(p)")                 All <div> elements that have a <p> element
            :empty              $(":empty")                     All elements that are empty
            :parent             $(":parent")                    All elements that are a parent of another element
            :hidden             $("p:hidden")                   All hidden <p> elements
            :visible            $("table:visible")              All visible tables
            :root               $(":root")                      The document's root element
            :lang(language)	$("p:lang(de)")                 All <p> elements with a lang attribute value starting with "de"

            [attribute]         $("[href]")                     All elements with a href attribute
            [attribute=value]	$("[href='default.htm']")	All elements with a href attribute value equal to "default.htm"
            [attribute!=value]	$("[href!='default.htm']")	All elements with a href attribute value not equal to "default.htm"
            [attribute$=value]	$("[href$='.jpg']")             All elements with a href attribute value ending with ".jpg"
            [attribute|=value]	$("[title|='Tomorrow']")	All elements with a title attribute value equal to 'Tomorrow', or starting with 'Tomorrow' followed by a hyphen
            [attribute^=value]	$("[title^='Tom']")             All elements with a title attribute value starting with "Tom"
            [attribute~=value]	$("[title~='hello']")           All elements with a title attribute value containing the specific word "hello"
            [attribute*=value]	$("[title*='hello']")           All elements with a title attribute value containing the word "hello"

            :input              $(":input")                     All input elements
            :text               $(":text")                      All input elements with type="text"
            :password           $(":password")                  All input elements with type="password"
            :radio              $(":radio")                     All input elements with type="radio"
            :checkbox           $(":checkbox")                  All input elements with type="checkbox"
            :submit             $(":submit")                    All input elements with type="submit"
            :reset              $(":reset")                     All input elements with type="reset"
            :button             $(":button")                    All input elements with type="button"
            :image              $(":image")                     All input elements with type="image"
            :file               $(":file")                      All input elements with type="file"
            :enabled            $(":enabled")                   All enabled input elements
            :disabled           $(":disabled")                  All disabled input elements
            :selected           $(":selected")                  All selected input elements
            :checked            $(":checked")                   All checked input elements

        2 - jQuery Event Methods

            Method                                      Description
            bind()                                      Attaches event handlers to elements
            blur()                                      Attaches/Triggers the blur event
            change()                                    Attaches/Triggers the change event
            click()                                     Attaches/Triggers the click event
            dblclick()                                  Attaches/Triggers the double click event
            delegate()                                  Attaches a handler to current, or future, specified child elements of the matching elements
            die()                                       Removed in version 1.9. Removes all event handlers added with the live() method
            error()                                     Deprecated in version 1.8. Attaches/Triggers the error event
            event.currentTarget                         The current DOM element within the event bubbling phase
            event.data                                  Contains the optional data passed to an event method when the current executing handler is bound
            event.delegateTarget                        Returns the element where the currently-called jQuery event handler was attached
            event.isDefaultPrevented()                  Returns whether event.preventDefault() was called for the event object
            event.isImmediatePropagationStopped()	Returns whether event.stopImmediatePropagation() was called for the event object
            event.isPropagationStopped()                Returns whether event.stopPropagation() was called for the event object
            event.namespace                             Returns the namespace specified when the event was triggered
            event.pageX                                 Returns the mouse position relative to the left edge of the document
            event.pageY                                 Returns the mouse position relative to the top edge of the document
            event.preventDefault()                      Prevents the default action of the event
            event.relatedTarget                         Returns which element being entered or exited on mouse movement.
            event.result                                Contains the last/previous value returned by an event handler triggered by the specified event
            event.stopImmediatePropagation()            Prevents other event handlers from being called
            event.stopPropagation()                     Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event
            event.target                                Returns which DOM element triggered the event
            event.timeStamp                             Returns the number of milliseconds since January 1, 1970, when the event is triggered
            event.type                                  Returns which event type was triggered
            event.which                                 Returns which keyboard key or mouse button was pressed for the event
            focus()                                     Attaches/Triggers the focus event
            focusin()                                   Attaches an event handler to the focusin event
            focusout()                           	Attaches an event handler to the focusout event
            hover()                                     Attaches two event handlers to the hover event
            keydown()                                   Attaches/Triggers the keydown event
            keypress()                           	Attaches/Triggers the keypress event
            keyup()                             	Attaches/Triggers the keyup event
            live()                              	Removed in version 1.9. Adds one or more event handlers to current, or future, selected elements
            load()                              	Deprecated in version 1.8. Attaches an event handler to the load event
            mousedown()                           	Attaches/Triggers the mousedown event
            mouseenter()                           	Attaches/Triggers the mouseenter event
            mouseleave()                           	Attaches/Triggers the mouseleave event
            mousemove()                           	Attaches/Triggers the mousemove event
            mouseout()                                  Attaches/Triggers the mouseout event
            mouseover()                           	Attaches/Triggers the mouseover event
            mouseup()                           	Attaches/Triggers the mouseup event
            off()                               	Removes event handlers attached with the on() method
            on()                                	Attaches event handlers to elements
            one()                               	Adds one or more event handlers to selected elements. This handler can only be triggered once per element
            $.proxy()                           	Takes an existing function and returns a new one with a particular context
            ready()                                     Specifies a function to execute when the DOM is fully loaded
            resize()                            	Attaches/Triggers the resize event
            scroll()                            	Attaches/Triggers the scroll event
            select()                            	Attaches/Triggers the select event
            submit()                            	Attaches/Triggers the submit event
            toggle()                            	Removed in version 1.9. Attaches two or more functions to toggle between for the click event
            trigger()                           	Triggers all events bound to the selected elements
            triggerHandler()                           	Triggers all functions bound to a specified event for the selected elements
            unbind()                                    Removes an added event handler from selected elements
            undelegate()                           	Removes an event handler to selected elements, now or in the future
            unload()                            	Deprecated in version 1.8. Attaches an event handler to the unload event

        3 - jQuery Effect Methods

            Method                  Description
            animate()               Runs a custom animation on the selected elements
            clearQueue()            Removes all remaining queued functions from the selected elements
            delay()                 Sets a delay for all queued functions on the selected elements
            dequeue()               Removes the next function from the queue, and then executes the function
            fadeIn()                Fades in the selected elements
            fadeOut()               Fades out the selected elements
            fadeTo()                Fades in/out the selected elements to a given opacity
            fadeToggle()            Toggles between the fadeIn() and fadeOut() methods
            finish()                Stops, removes and completes all queued animations for the selected elements
            hide()                  Hides the selected elements
            queue()                 Shows the queued functions on the selected elements
            show()                  Shows the selected elements
            slideDown()             Slides-down (shows) the selected elements
            slideToggle()           Toggles between the slideUp() and slideDown() methods
            slideUp()               Slides-up (hides) the selected elements
            stop()                  Stops the currently running animation for the selected elements
            toggle()                Toggles between the hide() and show() methods

        4 - jQuery HTML / CSS Methods

            Method              Description
            addClass()          Adds one or more class names to selected elements
            after()             Inserts content after selected elements
            append()            Inserts content at the end of selected elements
            appendTo()          Inserts HTML elements at the end of selected elements
            attr()              Sets or returns attributes/values of selected elements
            before()            Inserts content before selected elements
            clone()             Makes a copy of selected elements
            css()               Sets or returns one or more style properties for selected elements
            detach()            Removes selected elements (keeps data and events)
            empty()             Removes all child nodes and content from selected elements
            hasClass()          Checks if any of the selected elements have a specified class name
            height()            Sets or returns the height of selected elements
            html()              Sets or returns the content of selected elements
            innerHeight()	Returns the height of an element (includes padding, but not border)
            innerWidth()	Returns the width of an element (includes padding, but not border)
            insertAfter()	Inserts HTML elements after selected elements
            insertBefore()	Inserts HTML elements before selected elements
            offset()            Sets or returns the offset coordinates for selected elements (relative to the document)
            offsetParent()	Returns the first positioned parent element
            outerHeight()	Returns the height of an element (includes padding and border)
            outerWidth()	Returns the width of an element (includes padding and border)
            position()          Returns the position (relative to the parent element) of an element
            prepend()           Inserts content at the beginning of selected elements
            prependTo()         Inserts HTML elements at the beginning of selected elements
            prop()              Sets or returns properties/values of selected elements
            remove()            Removes the selected elements (including data and events)
            removeAttr()	Removes one or more attributes from selected elements
            removeClass()	Removes one or more classes from selected elements
            removeProp()	Removes a property set by the prop() method
            replaceAll()	Replaces selected elements with new HTML elements
            replaceWith()	Replaces selected elements with new content
            scrollLeft()	Sets or returns the horizontal scrollbar position of selected elements
            scrollTop()         Sets or returns the vertical scrollbar position of selected elements
            text()              Sets or returns the text content of selected elements
            toggleClass()	Toggles between adding/removing one or more classes from selected elements
            unwrap()            Removes the parent element of the selected elements
            val()               Sets or returns the value attribute of the selected elements (for form elements)
            width()             Sets or returns the width of selected elements
            wrap()              Wraps HTML element(s) around each selected element
            wrapAll()           Wraps HTML element(s) around all selected elements
            wrapInner()     	Wraps HTML element(s) around the content of each selected element


        5 - jQuery Traversing Methods

            Method              Description
            add()               Adds elements to the set of matched elements
            addBack()           Adds the previous set of elements to the current set
            andSelf()           Deprecated in version 1.8. An alias for addBack()
            children()          Returns all direct children of the selected element
            closest()           Returns the first ancestor of the selected element
            contents()          Returns all direct children of the selected element (including text and comment nodes)
            each()              Executes a function for each matched element
            end()               Ends the most recent filtering operation in the current chain, and return the set of matched elements to its previous state
            eq()                Returns an element with a specific index number of the selected elements
            filter()            Reduce the set of matched elements to those that match the selector or pass the function's test
            find()              Returns descendant elements of the selected element
            first()             Returns the first element of the selected elements
            has()               Returns all elements that have one or more elements inside of them
            is()                Checks the set of matched elements against a selector/element/jQuery object, and return true if at least one of these elements matches the given arguments
            last()              Returns the last element of the selected elements
            map()               Passes each element in the matched set through a function, producing a new jQuery object containing the return values
            next()              Returns the next sibling element of the selected element
            nextAll()           Returns all next sibling elements of the selected element
            nextUntil()         Returns all next sibling elements between two given arguments
            not()               Remove elements from the set of matched elements
            offsetParent()	Returns the first positioned parent element
            parent()            Returns the direct parent element of the selected element
            parents()           Returns all ancestor elements of the selected element
            parentsUntil()	Returns all ancestor elements between two given arguments
            prev()              Returns the previous sibling element of the selected element
            prevAll()           Returns all previous sibling elements of the selected element
            prevUntil()         Returns all previous sibling elements between two given arguments
            siblings()          Returns all sibling elements of the selected element
            slice()             Reduces the set of matched elements to a subset specified by a range of indices

        6 - jQuery AJAX Methods

            Method              Description
            $.ajax()            Performs an async AJAX request
            $.ajaxPrefilter()	Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax()
            $.ajaxSetup()	Sets the default values for future AJAX requests
            $.ajaxTransport()	Creates an object that handles the actual transmission of Ajax data
            $.get()             Loads data from a server using an AJAX HTTP GET request
            $.getJSON()         Loads JSON-encoded data from a server using a HTTP GET request
            $.getScript()	Loads (and executes) a JavaScript from a server using an AJAX HTTP GET request
            $.param()           Creates a serialized representation of an array or object (can be used as URL query string for AJAX requests)
            $.post()            Loads data from a server using an AJAX HTTP POST request
            ajaxComplete()	Specifies a function to run when the AJAX request completes
            ajaxError()         Specifies a function to run when the AJAX request completes with an error
            ajaxSend()          Specifies a function to run before the AJAX request is sent
            ajaxStart()         Specifies a function to run when the first AJAX request begins
            ajaxStop()          Specifies a function to run when all AJAX requests have completed
            ajaxSuccess()	Specifies a function to run when an AJAX request completes successfully
            load()              Loads data from a server and puts the returned data into the selected element
            serialize()         Encodes a set of form elements as a string for submission
            serializeArray()	Encodes a set of form elements as an array of names and values

        7 - jQuery Miscellaneous Methods

            Method              Description
            data()              Attaches data to, or gets data from, selected elements
            each()              Execute a function for each matched element
            get()               Get the DOM elements matched by the selector
            index()             Search for a given element from among the matched elements
            $.noConflict()	Release jQuery's control of the $ variable
            $.param()           Create a serialized representation of an array or object (can be used as URL query string for AJAX requests)
            removeData()	Removes a previously-stored piece of data
            size()              Deprecated in version 1.8. Return the number of DOM elements matched by the jQuery selector
            toArray()           Retrieve all the DOM elements contained in the jQuery set, as an array

        8 - jQuery Properties

            Method              Description
            context             Deprecated in version 1.10. Contains the original context passed to jQuery()
            jquery              Contains the jQuery version number
            jQuery.fx.interval	Change the animation firing rate in milliseconds
            jQuery.fx.off	Globally disable/enable all animations
            jQuery.support	A collection of properties representing different browser features or bugs (Intended for jQuery's internal use)
            length              Contains the number of elements in the jQuery object
